#!/bin/bash

src=c11node9
dest=c11node10
#dest=10.5.147.210

router=c11node28
ganglia=10.244.36.20

#migspeed=30
migspeed=125

rtt=$3
#rtt=180ms
#rtt=0.4ms

turn=$4

ram=2048
#ram=1800
#vcpu=1
vcpu=2

# is this exp mode?
IS_EXP=false

#postcopy=on
postcopy=off
#masterpost=on
masterpost=off

# log/idle/cluster/precopy/speed125/vcpu2/180ms/
logbasedir=/root/miglog/idle/cluster
logdir=$logbasedir/precopy/speed$migspeed/vcpu$vcpu/$rtt

#vcpu=1

vwnd=$1
run=$2
#prefix=2vms-r2
prefix=$logdir/${vwnd}vms-r${run}

ports=( 4446 4447 4448 4449 4450 4451 )
nports=${#ports[@]}

# boot up vm 
preptime=90

# sleep interval
sleeptime=5

mkdir -p $logdir

# number of remaining VMs to migrate
remain=$nports

# for cpu utilization
PREV_TOTAL=0
PREV_IDLE=0

function doexp() {
	# specify only exp-specific parameters

	# RTT = delay*2
	#delay=90       # 180ms RTT
	#delay=40       # 80ms RTT
	delay=10        # 20ms RTT
	#delay=0                # 0.4ms RTT (LAN)
	rtt=$(( delay * 2 ))ms

	vwnd=2
	run=1
	prefix=${vwnd}vms-r${run}
	#prefix=1vm-r4

	# ping or pong
	turn=pong

	logdir=/root/qm/log
	logfile=$logdir/${prefix}.logfile

	# last minutes for ganglia metrics
	#min=3min
	min=5min

	ssh $router service tc delay $delay

	# run workload: wordcount, terasort, kmeans, fuzzy kmeans, LDA
	#ssh master "cd /root/mahout; ./run" &

	#logsave $logfile time -p ./migrate $vwnd $run $rtt $turn
	time -p ./migrate $vwnd $run $rtt $turn

# [ping] c11node9 to c11node10
#if [[ $turn == "ping" ]]; then
#       ./migrate $vwnd $run $rtt
#fi

# [pong] c11node10 to c11node9
#if [[ $turn == "pong" ]]; then
#       ./migrate $vwnd $run $rtt
#       ssh $dest "cd /root/qemu/; ./cluster $vwnd $run"
#fi

	#download

	ssh $router service tc stop
}

function listen() {
	name=$1
	#file=migbench.img
	file=$2
	#file=vm512-29.img
	image=/var/lib/libvirt/images/nfs/c11node9/$file
	#ram=1024
	ram=$3
	vcpu=$4 # 1-8
	telnetport=$5 # starting 4436
	vncport=$6 # starting 1 (5901)
	listenport=$7 # starting 5436

	qemudir=/root/qemu
	#version=qemu-2.0
	#version=qemu-postcopy # qemu 1.1.50
	version=hybrid # qemu 1.6.50

	echo $name $file $ram $vcpu $telnetport :$vncport tcp:0:$listenport

	ssh $dest $qemudir/$version/x86_64-softmmu/qemu-system-x86_64 \
	        -name $name \
	        -drive file=$image \
	        -enable-kvm \
	        -m $ram \
	        -smp $vcpu \
	        -monitor telnet:0:$telnetport,server,nowait \
	        -vnc :$vncport \
	        -incoming tcp:0:$listenport \
	        -device virtio-net-pci,netdev=hn0,id=nic1 -netdev tap,helper=$qemudir/$version/qemu-bridge-helper,id=hn0 \
	        -daemonize
}

# migrate a single VM
function ncmigrate() {
	name=$1
	file=$2
	ram=$3
	vcpu=$4
	telnetport=$5
	vncport=$6
	listenport=$7
	postcopy=$8
	speed=$9
	#speed=125
	#speed=30

	background=off
	#background=on
	#mac=$3

	# prepare incoming migration at dest
	# start vm
	listen $name $file $ram $vcpu $telnetport $vncport $listenport 
	#ssh $test /root/qemu/listen-daemon $file $ram $vcpu $telnetport $vncport $listenport $name

	#if [ $file == "master.qcow2" ]; then
	#       telnetport=4436
	#fi

	# migrate
nc $src $telnetport << EOF
migrate_set_capability postcopy $postcopy
migrate_set_capability postcopy-move-background $background
migrate_set_speed $speed
migrate tcp:$test:$listenport
EOF

	echo
}

# get the list of the VMs running on the host
function getVMs() {
	host=$1
	ssh $host ps -ef | grep qemu | grep -v grep
}

# get infomration for a specific VM
function getVMInfo() {
	vmname=$1
	getVMs | grep $vmname
}

# get the VM names of the host
function getVMNames() {
	host=$1
	ssh $host ps -ef | grep qemu | grep -v grep | awk '{print $10}'
}

# get the number of current runing VMs of the host
function getCNVMs() {
	host=$1

	ssh $host ps -ef | grep qemu | grep -v grep | wc -l
}

# migrate multiple VMs with VM window
function migrate() {
	from=$src
	to=$dest
	
	if [ $turn == "pong" ]; then
		from=$dest
		to=$src
	fi

	# get the number of current running VMs on the host
	cnvms=`getCNVMs $from` 

	echo number of current running VMs = $cnvms

	if [[ $vwnd -gt $cnvms ]];then
		vwnd=$cnvms
	fi	
	echo vwnd = $vwnd

	# get the list of VMs
	vms=`getVMs $from`
	#vms=`ssh $host "ps -ef | grep qemu | grep -v grep"`
	echo $vms
	readarray -t array <<< "$vms"
	#set -f
	#IFS='
	#'
	#cmd $vms
	#unset IFS
	#set +f
	
	i=0
	#for (( i=0; i <$vwnd; i++ ))
	#for vm in "${vms[@]}"
	for vm in "${array[@]}"
	do
		# get the VM information for migration such as
		# name, ram, vcpu, telnet port, vnc port, migration port
		#vminfo=`getVMInfo $1`

		tport=$(( tport + 1 ))
		vport=$(( vport + 1 ))
		mport=$(( mport + 1 ))
		#name=slave$i
		echo $i $vm
		#echo $i $name $tport $vport $mport
		#ncmigrate $name ${name}.qcow2 $ram $vcpu $tport $vport $mport $postcopy $migspeed
#		$migcmd
		i=$(( i + 1))
		echo
	done
}

function migrateold() {
	tport=4446 # telnet port
	mport=5446 # migration tcp port
	vport=1 # vnc port
	name=master
	migcmd="ncmigrate $name ${name}.qcow2 $ram $vcpu $tport $vport $mport $masterpost $migspeed"
#	$migcmd

	#for (( i=100; i <$vwnd; i++ ))
	for (( i=1; i <$vwnd; i++ ))
	do
		tport=$(( tport + 1 ))
		vport=$(( vport + 1 ))
		mport=$(( mport + 1 ))
		name=slave$i
		echo $i $name $tport $vport $mport
		#ncmigrate $name ${name}.qcow2 $ram $vcpu $tport $vport $mport $postcopy $migspeed
#		$migcmd
	done
}

function check() {
	miglog=$prefix.log
	migtxt=$prefix.mig
	rm -rf $miglog

	#while [ $remain -gt 0 ]; 
	while [ 1 ]; 
	do
		#remain=${#ports[@]}
		#remain=$nports
		remain=$vwnd
		#for port in ${ports[@]}; 
		for (( port=4446; port <4446 + $vwnd; port++ ))
		do
			info=`./bin/checkstatus localhost $port`
			if [[ -z $info ]]; then
				(( remain -- ))
				continue
			fi

			status=`echo "$info" | grep -a complete | awk '{print $3}'`
			#echo $status

			if [[ $status == *completed* ]]; then
				echo $port
				echo "$info"
				echo $info >> $miglog

				./bin/stopvm localhost $port
				#./stopvm $dest $port
				(( remain -- ))
				continue
			fi

		#	./checkstatus $dest $port
		done

		echo remaining: $remain
		if [ $remain -le 0 ]; then
			break
		fi
		sleep $sleeptime
	done
	# convert mac format to unix
	tr '\r' '\n' < $miglog > $migtxt
}

# download ganglia metrics
function download() {
	min=3min
	wget -O $prefix.src.net.png "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=c11node9&s=by+name&g=network_report"
	wget -O $prefix.src.net.csv "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=c11node9&s=by+name&g=network_report&csv=1"
	wget -O $prefix.src.cpu.png "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=c11node9&s=by+name&g=cpu_report"
	wget -O $prefix.src.cpu.csv "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=c11node9&s=by+name&g=cpu_report&csv=1"
	wget -O $prefix.dest.net.png "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${dest}&s=by+name&g=network_report"
	wget -O $prefix.dest.net.csv "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${dest}&s=by+name&g=network_report&csv=1"
	wget -O $prefix.dest.cpu.png "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${dest}&s=by+name&g=cpu_report"
	wget -O $prefix.dest.cpu.csv "http://10.244.36.20/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${dest}&s=by+name&g=cpu_report&csv=1"

	for node in master slave1 slave2 slave3
        do
                for resource in cpu network
                do
                        #for filetype in png csv
                        #do
                                wget -O $prefix.$node.$resource.png "http://${ganglia}/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${node}&s=by+name&g=${resource}_report"
                                wget -O $prefix.$node.$resource.csv "http://${ganglia}/ganglia/graph.php?r=${min}&z=medium&c=Hadoop&h=${node}&s=by+name&g=${resource}_report&csv=1"
                        #done
                done
        done
}

# migrate cluster with dstat logging
function migratecluster() {
	dstatfile=$prefix.src.dstat
	srccsv=$dstatfile.csv
	dstatdest=$prefix.dest.dstat
	destcsv=$dstatdest.csv
	dstatrouter=$prefix.router.dstat
	routercsv=$dstatrouter.csv
	
	if $IS_EXP ; then
        dstatcmd="dstat -cnmd -N eth0,eth1,total --noheaders -o "
        #dstat -cmdngy -N eth0,eth1,total --noheaders > $dstatfile &
        $dstatcmd $srccsv > $dstatfile &
        #ssh $dest "dstat -cmdngy -N eth0,eth1,total --noheaders" > $dstatdest &
	ssh $dest mkdir -p $logdir
	ssh $dest $dstatcmd $destcsv > $dstatdest &
	#ssh $dest "$dstatcmd $dstatdest" &
	ssh $router mkdir -p $logdir
	ssh $router $dstatcmd $routercsv > $dstatrouter &
	fi

#	sleep $preptime
	migrate 
#	check

	if $IS_EXP ; then
        # stop dstat
        pgrep -fl dstat| awk '{print $1}' | xargs kill -9
        ssh $dest "pgrep -fl dstat| awk '{print $1}' | xargs kill -9"
	# delete the first 5 lines
	#sed -i '1,5d' $dstatfile
	fi

#	download

	#ssh $dest mkdir -p $logdir
	#scp $dest:$destcsv $prefix
	#scp $router:$routercsv $prefix

        # plot host cpu/net usage
	# fix to add both send/receive
        plotcpu="./plotcpu"
        plotnet="./plotnet"
        #$plotcpu $dstatfile
        #$plotnet $dstatfile
        #$plotcpu $dstatdest
        #$plotnet $dstatdest
}

# average cpu usage since the last measurement
function cpusage() {
  CPU=(`grep '^cpu ' /proc/stat`) # Get the total CPU statistics.
  unset CPU[0]                          # Discard the "cpu" prefix.
  IDLE=${CPU[4]}                        # Get the idle CPU time.
  # Calculate the total CPU time.
  TOTAL=0
  for VALUE in "${CPU[@]}"; do
    let "TOTAL=$TOTAL+$VALUE"
  done

  # Calculate the CPU usage since we last checked.
  let "DIFF_IDLE=${IDLE}-${PREV_IDLE}"
  let "DIFF_TOTAL=${TOTAL}-${PREV_TOTAL}"
  let "DIFF_USAGE=(1000*(${DIFF_TOTAL}-${DIFF_IDLE})/${DIFF_TOTAL}+5)/10"
  #echo -e "$DIFF_USAGE"
  echo -e "CPU: $DIFF_USAGE %"
  #echo -e "\rCPU: $DIFF_USAGE %  \b\b"

  # Remember the total and idle CPU times for the next check.
  PREV_TOTAL="$TOTAL"
  PREV_IDLE="$IDLE"
}

function iperftest() {
	logsave 1vm-r1.iperf iperf -c c11node10 -f M -t 30
}

function finish() {
	for port in ${ports[@]}; 
	do
		echo $port

		./bin/stopvm localhost $port
#		./stopvm $dest $port
	done
}

cpusage

time -p migratecluster
#migratecluster > migrate.log
#finish

cpusage
